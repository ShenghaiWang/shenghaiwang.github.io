<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xcode on Coding life</title>
    <link>https://timwang.au/tags/xcode/</link>
    <description>Recent content in Xcode on Coding life</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://timwang.au/tags/xcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LLDB debugger in Xcode — 1</title>
      <link>https://timwang.au/posts/lldb-debugger-in-xcode--1/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/lldb-debugger-in-xcode--1/</guid>
      <description>&lt;h2 id=&#34;get-help--manage-breakpoints&#34;&gt;Get help &amp;amp; manage breakpoints&lt;/h2&gt;&#xA;&lt;p&gt;LLDB is the current debugger tool that is integrated into Xcode. Even though lldb is a command line tool but Xcode provides UIs allowing us to access to certain lldb functionalities, which made it easier to use. However, not all of the lldb functions have a corresponding Xcode UI and learning the knowledge of lldb can definitely help us fully leverage this awesome tool in both tackling bugs and understanding how certain functions work as well, which will surely bring us to a next level as iOS developers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLDB debugger in Xcode — 2</title>
      <link>https://timwang.au/posts/lldb-debugger-in-xcode--2/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/lldb-debugger-in-xcode--2/</guid>
      <description>&lt;h2 id=&#34;step-through-the-code--inspect-values&#34;&gt;Step through the code &amp;amp; inspect values&lt;/h2&gt;&#xA;&lt;p&gt;From &lt;a href=&#34;https://medium.com/gitconnected/lldb-debugger-in-xcode-1-772dbd9abc9a&#34;&gt;the previous article&lt;/a&gt;, we have learnt how to set breakpoints. Once they are set, the app will pause at the breakpoints accordingly. In this article, we are going to explore the ways to interact with the app runtime at the paused breakpoints.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLDB debugger in Xcode — 3</title>
      <link>https://timwang.au/posts/lldb-debugger-in-xcode--3/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/lldb-debugger-in-xcode--3/</guid>
      <description>&lt;h2 id=&#34;manage-watchpoints&#34;&gt;Manage watchpoints&lt;/h2&gt;&#xA;&lt;p&gt;From the the &lt;a href=&#34;https://medium.com/gitconnected/lldb-debugger-in-xcode-1-772dbd9abc9a&#34;&gt;first&lt;/a&gt; and the &lt;a href=&#34;https://medium.com/gitconnected/lldb-debugger-in-xcode-2-05ce80359f78&#34;&gt;second&lt;/a&gt; articles of this series, we have known how to set breakpoints to pause the code and explore the app runtime. Apart from breakpoints, LLDB offers another way to pause the code called watchpoint, which will be the topics of this article.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Second Thoughts on iOS Project Setup</title>
      <link>https://timwang.au/posts/second-thoughts-on-ios-project-setup/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/second-thoughts-on-ios-project-setup/</guid>
      <description>&lt;p&gt;In the last few years, I have been working on a few medium to big iOS projects. All of these projects have great modular architecture — functionalities and features are broken down and implemented in their own libraries or frameworks. One project had more than forty libraries and another had more than sixty. But here came the question: what’s the best practice to set up a project with so many dependencies, especially when they are all under heavy development? I had the fortune to work with my team to improve these project setups. The following is what I learned from the process.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
