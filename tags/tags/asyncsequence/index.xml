<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AsyncSequence on Coding life</title>
    <link>https://timwang.au/tags/asyncsequence/</link>
    <description>Recent content in AsyncSequence on Coding life</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 May 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://timwang.au/tags/asyncsequence/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implement an AsyncSequence</title>
      <link>https://timwang.au/posts/implement-an-asyncsequence/</link>
      <pubDate>Sat, 20 May 2023 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/implement-an-asyncsequence/</guid>
      <description>&lt;p&gt;We have known &lt;code&gt;AsyncSequence&lt;/code&gt; is a great part of Swift Concurrency feature and learnt the difference between it and &lt;code&gt;Combine Publishers&lt;/code&gt; from &lt;a href=&#34;https://medium.com/@tim_wang/asyncsequence-vs-combine-publisher-40ee3f5f48b9&#34;&gt;this article&lt;/a&gt;. Weâ€™re going to look into ways of creating of an &lt;code&gt;AsyncSequence&lt;/code&gt; in this one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AsyncSequence vs. Combine Publisher</title>
      <link>https://timwang.au/posts/asyncsequence-vs-combine-publisher/</link>
      <pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/asyncsequence-vs-combine-publisher/</guid>
      <description>&lt;p&gt;AsyncSequence and Combine Publisher are different ways of handling future data. Both of them have rich operators/methods like &lt;code&gt;map, filter, combineLatest&lt;/code&gt; etc. to manage the data flow. But what are the differences and which one should we use?&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
