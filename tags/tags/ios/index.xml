<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IOS on Coding life</title>
    <link>https://timwang.au/tags/ios/</link>
    <description>Recent content in IOS on Coding life</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://timwang.au/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift Code Craft: TrieRouter from Vapor</title>
      <link>https://timwang.au/posts/swift-code-craft_trierouter-from-vapor/</link>
      <pubDate>Sun, 23 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/swift-code-craft_trierouter-from-vapor/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Welcome to the Swift Code Craft series. This collection explores ingenious Swift solutions to practical problems, highlighting elegant implementations that balance performance with simplicity. Each piece examines how Swift’s features can be leveraged to create code that’s both powerful and maintainable. Join us as we uncover valuable insights and techniques from the Swift ecosystem that you can apply to your own projects.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mastering Swift’s `dynamic` and `@_dynamicReplacement(for:)` for Dynamic Behaviour</title>
      <link>https://timwang.au/posts/swift-dynamicreplacement/</link>
      <pubDate>Thu, 23 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/swift-dynamicreplacement/</guid>
      <description>&lt;p&gt;Swift is primarily a statically dispatched language, but it does offer dynamic dispatch capabilities for times when flexibility trumps compile-time optimisation. In this article, we’ll dive into &lt;strong&gt;Swift’s&lt;/strong&gt; &lt;code&gt;**dynamic**&lt;/code&gt; &lt;strong&gt;keyword&lt;/strong&gt; and the underscored &lt;code&gt;**@_dynamicReplacement(for:)**&lt;/code&gt; &lt;strong&gt;attribute&lt;/strong&gt;, which together enable a form of &lt;em&gt;method swizzling&lt;/em&gt; in Swift.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Safeguard Data in IOS Apps Using Swift</title>
      <link>https://timwang.au/posts/safeguard-data-in-ios-apps-using-swift/</link>
      <pubDate>Mon, 23 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/safeguard-data-in-ios-apps-using-swift/</guid>
      <description>&lt;p&gt;In today’s mobile‑first world, safeguarding our apps’ most sensitive data — whether it lives in memory or on disk — is non‑negotiable. In this guide, we’ll explore how we can protect data in our apps by leveraging Swift‑native APIs and industry best practices.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Various ways to secure network traffic for mobile apps</title>
      <link>https://timwang.au/posts/various-ways-to-secure-network-traffic-for-mobile-apps/</link>
      <pubDate>Mon, 23 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/various-ways-to-secure-network-traffic-for-mobile-apps/</guid>
      <description>&lt;p&gt;In today’s mobile-first world, securing communication between the mobile app and backend servers is no longer optional — it’s essential.&lt;/p&gt;&#xA;&lt;p&gt;While HTTPS protects data in transit, it doesn’t protect against:&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLDB debugger in Xcode — 1</title>
      <link>https://timwang.au/posts/lldb-debugger-in-xcode--1/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/lldb-debugger-in-xcode--1/</guid>
      <description>&lt;h2 id=&#34;get-help--manage-breakpoints&#34;&gt;Get help &amp;amp; manage breakpoints&lt;/h2&gt;&#xA;&lt;p&gt;LLDB is the current debugger tool that is integrated into Xcode. Even though lldb is a command line tool but Xcode provides UIs allowing us to access to certain lldb functionalities, which made it easier to use. However, not all of the lldb functions have a corresponding Xcode UI and learning the knowledge of lldb can definitely help us fully leverage this awesome tool in both tackling bugs and understanding how certain functions work as well, which will surely bring us to a next level as iOS developers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLDB debugger in Xcode — 2</title>
      <link>https://timwang.au/posts/lldb-debugger-in-xcode--2/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/lldb-debugger-in-xcode--2/</guid>
      <description>&lt;h2 id=&#34;step-through-the-code--inspect-values&#34;&gt;Step through the code &amp;amp; inspect values&lt;/h2&gt;&#xA;&lt;p&gt;From &lt;a href=&#34;https://medium.com/gitconnected/lldb-debugger-in-xcode-1-772dbd9abc9a&#34;&gt;the previous article&lt;/a&gt;, we have learnt how to set breakpoints. Once they are set, the app will pause at the breakpoints accordingly. In this article, we are going to explore the ways to interact with the app runtime at the paused breakpoints.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LLDB debugger in Xcode — 3</title>
      <link>https://timwang.au/posts/lldb-debugger-in-xcode--3/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/lldb-debugger-in-xcode--3/</guid>
      <description>&lt;h2 id=&#34;manage-watchpoints&#34;&gt;Manage watchpoints&lt;/h2&gt;&#xA;&lt;p&gt;From the the &lt;a href=&#34;https://medium.com/gitconnected/lldb-debugger-in-xcode-1-772dbd9abc9a&#34;&gt;first&lt;/a&gt; and the &lt;a href=&#34;https://medium.com/gitconnected/lldb-debugger-in-xcode-2-05ce80359f78&#34;&gt;second&lt;/a&gt; articles of this series, we have known how to set breakpoints to pause the code and explore the app runtime. Apart from breakpoints, LLDB offers another way to pause the code called watchpoint, which will be the topics of this article.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Second Thoughts on iOS Project Setup</title>
      <link>https://timwang.au/posts/second-thoughts-on-ios-project-setup/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/second-thoughts-on-ios-project-setup/</guid>
      <description>&lt;p&gt;In the last few years, I have been working on a few medium to big iOS projects. All of these projects have great modular architecture — functionalities and features are broken down and implemented in their own libraries or frameworks. One project had more than forty libraries and another had more than sixty. But here came the question: what’s the best practice to set up a project with so many dependencies, especially when they are all under heavy development? I had the fortune to work with my team to improve these project setups. The following is what I learned from the process.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Ins and Outs of Getting the Bundle</title>
      <link>https://timwang.au/posts/the-ins-and-outs-of-getting-the-bundle/</link>
      <pubDate>Tue, 23 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://timwang.au/posts/the-ins-and-outs-of-getting-the-bundle/</guid>
      <description>&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;&#xA;&lt;p&gt;Apple uses bundles to represent apps, frameworks, plug-ins, and many other specific types of content and we often need to access to the resources like image assets, localised string resources or other types of files that embedded in these bundles, for which, we need to get hold of the bundle objects.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
